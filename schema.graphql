# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AuthPayload {
  token: String!
  user: User!
}

type Contract {
  archived: Boolean!
  end: String!
  groups: [Group!]!
  hexColor: String!
  id: Int!
  name: String!
  skills: [Skill!]!
  start: String!
}

type Group {
  contracts: [Contract!]!
  id: Int!
  name: String!
  students: [Student!]!
}

type Mutation {
  createOneContract(end: String!, hexColor: String!, name: String!, skillNames: [String!]!, start: String!): Contract!
  createOneGroup(contractID: Int, name: String!): Group!
  createOneSkill(contractID: Int!, name: String!): Skill!
  createOneStudent(student: StudentInput!, user: UserInput!): Student!
  deleteOneContract(id: Int!): Contract!
  deleteOneSkill(id: Int!): Skill!
  deleteOneStudent(ownerUsername: String!): Student!
  login(password: String!, username: String!): AuthPayload!
  updateOneContract(contractID: Int!, groupIDs: [Int!]): Contract!
  updateOneSkill(name: String, skillID: Int!): Skill!
  updateOneStudent(groupIDs: [Int!], ownerUsername: String!): Student!
  upsertOneSkillToStudent(mark: Mark!, skillID: Int!, studentOwnerUsername: String!): StudentSkill!
}

type Query {
  contract(id: Int!): Contract!
  contracts(groupIds: [Int!]): [Contract!]!
  groups: [Group!]!
  me: User!
  student(ownerUsername: String!): Student!
  studentSkills(contractID: Int, studentUsername: String!): [StudentSkill!]!
  students(contractID: Int): [Student!]!
  teachers: [Teacher!]!
}

type Skill {
  contract: Contract!
  contractId: Int!
  id: Int!
  name: String!
  studentSkills: [StudentSkill!]!
}

type Student {
  firstName: String!
  groups: [Group!]!
  lastName: String!
  owner: User!
  ownerUsername: String!
  studentSkills: [StudentSkill!]!
}

type StudentSkill {
  mark: Mark!
  skill: Skill!
  skillID: Int!
  student: Student!
  studentID: String!
}

type Teacher {
  firstName: String!
  lastName: String!
  owner: User!
  ownerUsername: String!
}

type User {
  role: Role!
  student: [Student!]!
  teacher: [Teacher!]!
  username: String!
}

enum Mark {
  BAD
  GOOD
  TODO
  TO_CORRECT
  TO_FINISH
  VERY_BAD
  VERY_GOOD
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

input StudentInput {
  firstName: String!
  lastName: String!
}

input UserInput {
  password: String!
}
