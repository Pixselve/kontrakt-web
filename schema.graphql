# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

interface AuthPayload {
  token: String!
}

union User = Student | Teacher

type AuthPayloadStudent implements AuthPayload {
  student: Student!
  token: String!
}

type AuthPayloadTeacher implements AuthPayload {
  teacher: Teacher!
  token: String!
}

type Contract {
  archived: Boolean!
  end: DateTime!
  groups: [Group!]!
  id: Int!
  name: String!
  rgb: String!
  skills(markValues: [String!]): [Skill!]!
  start: DateTime!
}

type Group {
  contracts: [Contract!]!
  id: Int!
  name: String!
  students: [Student!]!
}

type Mark {
  icon: String!
  rgb: String!
  skillsToStudents: [SkillToStudent!]!
  text: String!
  value: String!
}

type Mutation {
  createOneContract(contract: CreateOneContractInput!): Contract!
  createOneGroup(group: CreateOneGroupInput!): Group!
  createOneSkill(skill: CreateOneSkillInput!): Skill!
  createOneStudent(student: CreateOneStudentInput!): Student!
  createOneTeacher(teacher: CreateOneTeacherInput!): Teacher!
  deleteOneContract(id: Int!): Contract!
  deleteOneSkill(id: Int!): Skill!
  deleteOneStudent(id: Int!): Student!
  deleteOneTeacher(email: String!): Teacher!
  loginStudent(student: LoginStudentInput!): AuthPayloadStudent!
  loginTeacher(teacher: CreateOneTeacherInput!): AuthPayloadTeacher!
  updateOneContract(contract: UpdateOneContractInput!, id: Int!): Contract!
  updateOneSkill(id: Int!, skill: UpdateOneSkillInput!): Skill!
  updateOneStudent(id: Int!, student: UpdateOneStudentInput!): Student!
  upsertOneSkillToStudent(skillToStudent: UpsertOneSkillToStudentInput!): SkillToStudent!
}

type Query {
  contract(id: Int!): Contract!
  contracts(groups: [Int!]): [Contract!]!
  findManyContractNotFinishedByStudent(studentId: Int!): [Contract!]!
  groups: [Group!]!
  marks: [Mark!]!
  me: User!
  student(id: Int!): Student!
  students: [Student!]!
  teachers: [Teacher!]!
}

type Skill {
  contract: Contract!
  contractId: Int!
  id: Int!
  name: String!
  skillToStudent(studentId: Int!): SkillToStudent
  skillToStudents: [SkillToStudent!]!
}

type SkillToStudent {
  mark: Mark!
  markValue: String!
  skill: Skill!
  skillId: Int!
  student: Student!
  studentId: Int!
}

type Student {
  firstName: String!
  groups: [Group!]!
  id: Int!
  lastName: String!
  skillsToStudent(markFilter: [String!] = []): [SkillToStudent!]!
  username: Int!
}

type Teacher {
  email: String!
  password: String!
}

input CreateOneContractInput {
  end: DateTime!
  name: String!
  rgb: String!
  skillNames: [String!]!
  start: DateTime!
}

input CreateOneGroupInput {
  name: String!
}

input CreateOneSkillInput {
  contractId: Int!
  name: String!
}

input CreateOneStudentInput {
  firstName: String!
  groupIds: [Int!] = []
  lastName: String!
}

input CreateOneTeacherInput {
  email: String!
  password: String!
}

input LoginStudentInput {
  username: Int!
}

input UpdateOneContractInput {
  end: DateTime
  groupIds: [Int!]
  name: String
  rgb: String
  start: DateTime
}

input UpdateOneSkillInput {
  name: String
}

input UpdateOneStudentInput {
  firstName: String
  groupIds: [Int!]
  lastName: String
}

input UpsertOneSkillToStudentInput {
  markValue: String!
  skillId: Int!
  studentId: Int!
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
